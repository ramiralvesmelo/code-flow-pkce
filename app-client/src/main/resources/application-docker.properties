# =========================
# APP CLIENT (PKCE) - DOCKER
# =========================
spring.application.name=app-client
server.port=8081
server.servlet.context-path=/

# (JSP) View Resolver
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
spring.web.resources.add-mappings=true

# =========================
# LOG
# =========================
logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO

# =========================
# OAUTH2 / KEYCLOAK (PKCE)
# =========================
# IMPORTANTÍSSIMO: usar o issuer da REDE DOCKER (service "keycloak")
# O navegador do host continua acessando http://localhost:8081
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/app-pkce-realm

# Client público (PKCE) — sem secret
spring.security.oauth2.client.registration.keycloak.client-id=app-client
spring.security.oauth2.client.registration.keycloak.client-authentication-method=none
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code

# Deixar o template padrão (o Spring ajusta {baseUrl} automaticamente)
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Escopos básicos OIDC (opcional — pode omitir se usar default client scopes do realm)
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email

# =========================
# API REMOTA (RESOURCE SERVER)
# =========================
# Na REDE DOCKER, a API é resolvida pelo service "app-resource"
app.api.base=http://app-resource:8082