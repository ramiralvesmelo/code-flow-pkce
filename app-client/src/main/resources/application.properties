# =========================
# APP / SERVIDOR
# =========================
spring.application.name=${SPRING_APP_NAME:app-client}
server.port=${SERVER_PORT:8081}
server.servlet.context-path=${SERVER_CONTEXT_PATH:/}

# =========================
# JSP (View Resolver)
# =========================
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

# Evitar conflitos com recursos estáticos (habilita mapeamento padrão /static, /public, etc.)
spring.web.resources.add-mappings=true

# =========================
# LOG
# =========================
# Nível padrão do root logger
logging.level.root=${LOG_ROOT_LEVEL:INFO}
# Nível de log do Spring Security
logging.level.org.springframework.security=${LOG_SECURITY_LEVEL:INFO}

# =========================
# OAUTH2 / KEYCLOAK (PKCE)
# =========================
# Descoberta OIDC via Issuer URI do Realm
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/app-pkce-realm}

# Registro do cliente (PKCE = public client, sem secret)
spring.security.oauth2.client.registration.keycloak.client-id=${OAUTH2_CLIENT_ID:app-client}
spring.security.oauth2.client.registration.keycloak.client-authentication-method=none
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code

# Redirect URI padrão do Spring Security
spring.security.oauth2.client.registration.keycloak.redirect-uri=${OAUTH2_REDIRECT_URI:{baseUrl}/login/oauth2/code/{registrationId}}

# =========================
# API REMOTA (RESOURCE SERVER)
# =========================
# Base URL da API protegida (pode ser serviço Docker ou localhost)
app.api.base=${APP_API_BASE:http://localhost:8082}